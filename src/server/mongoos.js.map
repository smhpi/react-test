{"version":3,"sources":["mongoos.js"],"names":["mongoose","require","Schema","module","exports","db","connect","UserSchema","email","type","String","required","trim","unique","match","facebookProvider","id","token","select","twitterProvider","googleProvider","set","getters","virtuals","statics","upsertFbUser","accessToken","refreshToken","profile","cb","that","findOne","err","user","newUser","fullName","displayName","emails","value","save","error","savedUser","console","log","upsertGoogleUser","model"],"mappings":"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","file":"mongoos.js","sourcesContent":["'use strict';\r\n\r\nvar mongoose = require('mongoose');\r\nvar Schema = mongoose.Schema;\r\n\r\nmodule.exports = function () {\r\n\r\n    var db = mongoose.connect('mongodb://localhost:27017/maki');\r\n\r\n    var UserSchema = new Schema({\r\n        email: {\r\n            type: String, required: true,\r\n            trim: true, unique: true,\r\n            match: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\r\n        },\r\n        facebookProvider: {\r\n            type: {\r\n                id: String,\r\n                token: String\r\n            },\r\n            select: false\r\n        },\r\n        twitterProvider: {\r\n            type: {\r\n                id: String,\r\n                token: String\r\n            },\r\n            select: false\r\n        },\r\n        googleProvider: {\r\n            type: {\r\n                id: String,\r\n                token: String\r\n            },\r\n            select: false\r\n        }\r\n    });\r\n\r\n    UserSchema.set('toJSON', {getters: true, virtuals: true});\r\n\r\n    UserSchema.statics.upsertFbUser = function(accessToken, refreshToken, profile, cb) {\r\n        var that = this;\r\n        return this.findOne({\r\n            'facebookProvider.id': profile.id\r\n        }, function(err, user) {\r\n            // no user was found, lets create a new one\r\n            if (!user) {\r\n                var newUser = new that({\r\n                    fullName: profile.displayName,\r\n                    email: profile.emails[0].value,\r\n                    facebookProvider: {\r\n                        id: profile.id,\r\n                        token: accessToken\r\n                    }\r\n                });\r\n\r\n                newUser.save(function(error, savedUser) {\r\n                    if (error) {\r\n                        console.log(error);\r\n                    }\r\n                    return cb(error, savedUser);\r\n                });\r\n            } else {\r\n                return cb(err, user);\r\n            }\r\n        });\r\n    };\r\n\r\n    UserSchema.statics.upsertGoogleUser = function(accessToken, refreshToken, profile, cb) {\r\n        var that = this;\r\n        return this.findOne({\r\n            'googleProvider.id': profile.id\r\n        }, function(err, user) {\r\n            // no user was found, lets create a new one\r\n            if (!user) {\r\n                var newUser = new that({\r\n                    fullName: profile.displayName,\r\n                    email: profile.emails[0].value,\r\n                    googleProvider: {\r\n                        id: profile.id,\r\n                        token: accessToken\r\n                    }\r\n                });\r\n\r\n                newUser.save(function(error, savedUser) {\r\n                    if (error) {\r\n                        console.log(error);\r\n                    }\r\n                    return cb(error, savedUser);\r\n                });\r\n            } else {\r\n                return cb(err, user);\r\n            }\r\n        });\r\n    };\r\n\r\n    mongoose.model('User', UserSchema);\r\n\r\n    return db;\r\n};"]}